{"uid":"6af0be7f8f9da5d","name":"Проверка ошибки авторизации курьера при отсутствии в запросе обязательного поля","fullName":"tests.test_login_courier#test_login_courier_without_one_field_return_error_success","historyId":"0cc16121ed19c1fa3608acd87569ef67","time":{"start":1706722177962,"stop":1706722238207,"duration":60245},"status":"failed","statusMessage":"AssertionError: assert 504 == <HTTPStatus.BAD_REQUEST: 400>\n +  where 504 = <Response [504]>.status_code\n +  and   <HTTPStatus.BAD_REQUEST: 400> = HTTPStatus.BAD_REQUEST","statusTrace":"self = <test_login_courier.TestLoginCourier object at 0x00000250FA776910>, get_url = 'https://qa-scooter.praktikum-services.ru/api/v1/courier/login', field = 'login'\nget_login_data = {'login': 'vlbhtkxeae', 'password': 'uvtdehgfvl'}\n\n    @allure.title('Проверка ошибки авторизации курьера при отсутствии в запросе обязательного поля')\n    @pytest.mark.parametrize('field', ['login', 'password'])\n    def test_login_courier_without_one_field_return_error_success(self, get_url, field, get_login_data):\n        payload = dict.fromkeys([field, ])\n        with allure.step(\"Формирование тела запроса\"):\n            payload = get_data_without_one_required_field(payload, get_login_data)\n        with allure.step(\"Получение ответа\"):\n            response = requests.post(url=get_url, data=payload)\n        with allure.step(\"Проверка текста ошибки\"):\n>           assert response.status_code == HTTPStatus.BAD_REQUEST\nE           assert 504 == <HTTPStatus.BAD_REQUEST: 400>\nE            +  where 504 = <Response [504]>.status_code\nE            +  and   <HTTPStatus.BAD_REQUEST: 400> = HTTPStatus.BAD_REQUEST\n\ntests\\test_login_courier.py:49: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_login_data","time":{"start":1706722177760,"stop":1706722177959,"duration":199},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_url","time":{"start":1706722177760,"stop":1706722177760,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 504 == <HTTPStatus.BAD_REQUEST: 400>\n +  where 504 = <Response [504]>.status_code\n +  and   <HTTPStatus.BAD_REQUEST: 400> = HTTPStatus.BAD_REQUEST","statusTrace":"self = <test_login_courier.TestLoginCourier object at 0x00000250FA776910>, get_url = 'https://qa-scooter.praktikum-services.ru/api/v1/courier/login', field = 'login'\nget_login_data = {'login': 'vlbhtkxeae', 'password': 'uvtdehgfvl'}\n\n    @allure.title('Проверка ошибки авторизации курьера при отсутствии в запросе обязательного поля')\n    @pytest.mark.parametrize('field', ['login', 'password'])\n    def test_login_courier_without_one_field_return_error_success(self, get_url, field, get_login_data):\n        payload = dict.fromkeys([field, ])\n        with allure.step(\"Формирование тела запроса\"):\n            payload = get_data_without_one_required_field(payload, get_login_data)\n        with allure.step(\"Получение ответа\"):\n            response = requests.post(url=get_url, data=payload)\n        with allure.step(\"Проверка текста ошибки\"):\n>           assert response.status_code == HTTPStatus.BAD_REQUEST\nE           assert 504 == <HTTPStatus.BAD_REQUEST: 400>\nE            +  where 504 = <Response [504]>.status_code\nE            +  and   <HTTPStatus.BAD_REQUEST: 400> = HTTPStatus.BAD_REQUEST\n\ntests\\test_login_courier.py:49: AssertionError","steps":[{"name":"Формирование тела запроса","time":{"start":1706722177963,"stop":1706722177964,"duration":1},"status":"passed","steps":[{"name":"Формирование тела запроса","time":{"start":1706722177964,"stop":1706722177964,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"payload","value":"{'login': None}"},{"name":"get_login_data","value":"{'login': 'vlbhtkxeae', 'password': 'uvtdehgfvl'}"}],"hasContent":true,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":1,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Получение ответа","time":{"start":1706722177964,"stop":1706722238205,"duration":60241},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Проверка текста ошибки","time":{"start":1706722238205,"stop":1706722238206,"duration":1},"status":"failed","statusMessage":"AssertionError: assert 504 == <HTTPStatus.BAD_REQUEST: 400>\n +  where 504 = <Response [504]>.status_code\n +  and   <HTTPStatus.BAD_REQUEST: 400> = HTTPStatus.BAD_REQUEST\n","statusTrace":"  File \"D:\\Dev\\qa_python_sprint_7\\tests\\test_login_courier.py\", line 49, in test_login_courier_without_one_field_return_error_success\n    assert response.status_code == HTTPStatus.BAD_REQUEST\n    \n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":0}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":4,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":0},"afterStages":[],"labels":[{"name":"tag","value":"get_url('login_courier')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login_courier"},{"name":"subSuite","value":"TestLoginCourier"},{"name":"host","value":"DESKTOP-0EOUJEC"},{"name":"thread","value":"5888-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login_courier"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"field","value":"'login'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["get_url('login_courier')"]},"source":"6af0be7f8f9da5d.json","parameterValues":["'login'"]}